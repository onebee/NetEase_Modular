if (isRelease) {
    apply plugin: 'com.android.library'
} else {
    apply plugin: 'com.android.application'
}


def androidId = rootProject.ext.androidId
def appId = rootProject.ext.appId
def support = rootProject.ext.dependencies

android {
    compileSdkVersion androidId.compileSdkVersion
    buildToolsVersion androidId.buildToolsVersion
    defaultConfig {
        if (!isRelease) {
            applicationId appId.order
        }

        minSdkVersion androidId.minSdkVersion
        targetSdkVersion androidId.targetSdkVersion
        versionCode androidId.versionCode
        versionName androidId.versionName
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"


        // 这个方法接收三个非空的参数，第一个：确定值的类型，第二个：指定key的名字，第三个：传值（必须是String）
        // 为什么需要定义这个？因为src代码中有可能需要用到跨模块交互，如果是组件化模块显然不行
        // 切记：不能在android根节点，只能在defaultConfig或buildTypes节点下
        buildConfigField("boolean", "isRelease", String.valueOf(isRelease))

        // 在gradle 文件中配置选项参数值,用于APT传参接收,必须写在defaultConfig 下面
        javaCompileOptions {
            annotationProcessorOptions {
                arguments = [moduleName: project.getName(), packageNameForAPT: packageNameForAPT]
            }
        }
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    // 配置资源路径,方便测试环境,打包不集成到正式环境
    sourceSets {
        main {

            if (!isRelease) {
                // 如果是组件化模式,需要单独运行时
                manifest.srcFile 'src/main/debug/AndroidManifest.xml'
//                java.srcDirs = ['src/main/java']
//                res.srcDirs = ['src/main/res']
//                resource.srcDirs = ['scr/main/resources']
//                aidl.srcDirs = ['src/main/aidl']
//                assets.srcDir = ['src/main/assets']
            } else {
                // 集成化模式,整个项目打包
                manifest.srcFile 'src/main/AndroidManifest.xml'
                java {
                    // release 时 debug 目录下文件不需要合并到主工程
                    exclude('**/debug/**')
                }
            }
        }


    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    support.each { k, v ->
        implementation v
    }
    implementation project(':common') // 公共基础库
    implementation project(':arouter_annotation')
    annotationProcessor project(':arouter_complier')


}